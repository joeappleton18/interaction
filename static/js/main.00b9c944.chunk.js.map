{"version":3,"sources":["Components/Week1/assets/logo.svg","Components/Week1/index.js","Components/Week2/index.js","Components/Week3/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Week1","console","info","logo","src","alt","StyledDiv","styled","div","Alert","useState","visible","setVisible","onClick","e","Week2","StyledWrapper","StyledButton","button","props","color","Button","children","Week3","Home","to","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,yLCkB5BC,EAfD,WAEZC,QAAQC,KAAKC,KAKb,OACE,oCACE,yBAAKC,IAAKD,IAAME,IAAI,SACpB,sD,4LCVN,IAAMC,EAAYC,IAAOC,IAAV,KAOTC,EAAQ,WAAO,IAAD,EACYC,oBAAS,GADrB,mBACXC,EADW,KACFC,EADE,KAOlB,OACE,oCACGD,GACC,kBAACL,EAAD,KACE,iDACA,0BAAMO,QATM,SAACC,GACnBF,GAAW,KAQL,QAeKG,EARD,WAKZ,OAAO,kBAAC,EAAD,O,qcC/BT,IAAMC,EAAgBT,IAAOC,IAAV,KAQbS,EAAeV,IAAOW,OAAV,KAEI,SAACC,GAAD,OAAWA,EAAMC,SAUjCC,EAAS,SAACF,GAAW,IACjBG,EAAoBH,EAApBG,SAAUF,EAAUD,EAAVC,MAClB,OAAO,kBAACH,EAAD,CAAcG,MAAOA,GAArB,IAA8BE,EAA9B,MAaMC,EAVD,WACZ,OACE,kBAACP,EAAD,KACE,kBAAC,EAAD,CAAQI,MAAM,WAAd,cACA,kBAAC,EAAD,CAAQA,MAAM,WAAd,cACA,kBAAC,EAAD,CAAQA,MAAM,WAAd,gB,eCzBAI,EAAO,kBACX,6BACE,+DACA,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,WACN,IACD,2CAEF,kBAAC,IAAD,CAAMA,GAAG,WAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,gBA2BOC,MArBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UC1BUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.00b9c944.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./assets/logo.svg\";\n\nconst Week1 = () => {\n  const name = \"Joe\";\n  console.info(logo);\n  debugger;\n\n  const location = () => \"Brighton\";\n\n  return (\n    <>\n      <img src={logo} alt=\"logo\" />\n      <h1>Hello this is week 1</h1>\n    </>\n  );\n};\n\nexport default Week1;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledDiv = styled.div`\n  border: 1px solid red;\n  display: flex;\n  justify-content: space-around;\n  width: 20vw;\n`;\n\nconst Alert = () => {\n  const [visible, setVisible] = useState(true);\n\n  const handleClick = (e) => {\n    setVisible(false);\n  };\n\n  return (\n    <>\n      {visible && (\n        <StyledDiv>\n          <p>this is an example</p>\n          <span onClick={handleClick}>x</span>\n        </StyledDiv>\n      )}\n    </>\n  );\n};\n\nconst Week2 = () => {\n  const name = \"Joe\";\n\n  const location = () => \"Brighton\";\n\n  return <Alert />;\n};\n\nexport default Week2;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst StyledButton = styled.button`\n  color: #fff;\n  background-color: ${(props) => props.color};\n  padding: 1rem 2rem;\n  font-size: 1.5rem;\n  border: 0;\n  border-radius: 0.25rem;\n  box-shadow: 0 0 0.5rem rgba(0, 0, 0.3);\n  cursor: pointer;\n  margin: 2%;\n`;\n\nconst Button = (props) => {\n  const { children, color } = props;\n  return <StyledButton color={color}> {children} </StyledButton>;\n};\n\nconst Week3 = () => {\n  return (\n    <StyledWrapper>\n      <Button color=\"#6200ee\"> Button 1 </Button>\n      <Button color=\"#1200ee\"> Button 2 </Button>\n      <Button color=\"#1280ee\"> Button 3 </Button>\n    </StyledWrapper>\n  );\n};\n\nexport default Week3;\n","import React from \"react\";\nimport \"./App.css\";\nimport Week1 from \"./Components/Week1\";\nimport Week2 from \"./Components/Week2\";\nimport Week3 from \"./Components/Week3\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nconst Home = () => (\n  <nav>\n    <h1> Welcome to Interaction Design!</h1>\n    <ul>\n      <li>\n        <Link to=\"/week-1\">\n          {\" \"}\n          <h2> Week 1 | </h2>\n        </Link>\n        <Link to=\"/week-2\"> Week 2 |</Link>\n        <Link to=\"/week-3\"> Week 3|</Link>\n      </li>\n    </ul>\n  </nav>\n);\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/week-1\">\n          <Week1 />\n        </Route>\n        <Route path=\"/week-2\">\n          <Week2 />\n        </Route>\n        <Route path=\"/week-3\">\n          <Week3 />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}